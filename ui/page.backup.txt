import {
    Bird,
    BotIcon,
    BotMessageSquare,
    CornerDownLeft,
    Mic,
    Paperclip,
    Rabbit,
    Turtle,
    User2Icon,
    UserCircle2,
} from "lucide-react"

import {Badge} from "@/components/ui/badge"
import {Button} from "@/components/ui/button"
import {Input} from "@/components/ui/input"
import {Label} from "@/components/ui/label"
import {Select, SelectContent, SelectItem, SelectTrigger, SelectValue,} from "@/components/ui/select"
import {Textarea} from "@/components/ui/textarea"
import {Tooltip, TooltipContent, TooltipTrigger,} from "@/components/ui/tooltip"
import {Avatar, AvatarFallback, AvatarImage} from "@/components/ui/avatar";
import Markdown from 'react-markdown'
import rehype  from 'rehype-highlight';
import {Prism as SyntaxHighlighter} from 'react-syntax-highlighter';
import {duotoneSpace} from 'react-syntax-highlighter/dist/esm/styles/prism'
import rehypeStringify from 'rehype-stringify'
import remarkGfm from 'remark-gfm'
import remarkParse from 'remark-parse'
import remarkRehype from 'remark-rehype'
import Spinner from "@/components/Spinner/Spinner";
import {oneDark as primTheme} from "react-syntax-highlighter/src/styles/prism";
import {ChatBubbleIcon} from "@radix-ui/react-icons";
import rehypeRaw from "rehype-raw";
import CodeCopyBtn from "@/components/CodeCopyButton";
import ChatInput from "@/components/Chat/ChatInput";

// Add the CodeCopyBtn component to our PRE element
const Pre = ({ children }) => <pre className="blog-pre">
        <CodeCopyBtn>{children}</CodeCopyBtn>
    {children}
    </pre>
function ChatSettings() {
    return <div className="w-full">
        <form >
            <fieldset className="grid gap-6 rounded-lg border p-4">
                <legend className="-ml-1 px-1 text-sm font-medium">
                    Settings
                </legend>
                <div className="grid gap-3">
                    <Label htmlFor="model">Model</Label>
                    <Select>
                        <SelectTrigger
                            id="model"
                            className="items-start [&_[data-description]]:hidden"
                        >
                            <SelectValue placeholder="Select a model"/>
                        </SelectTrigger>
                        <SelectContent>
                            <SelectItem value="genesis">
                                <div className="flex items-start gap-3 text-muted-foreground">
                                    <Rabbit className="size-5"/>
                                    <div className="grid gap-0.5">
                                        <p>
                                            Neural{" "}
                                            <span className="font-medium text-foreground">
                                Genesis
                              </span>
                                        </p>
                                        <p className="text-xs" data-description>
                                            Our fastest model for general use cases.
                                        </p>
                                    </div>
                                </div>
                            </SelectItem>
                            <SelectItem value="explorer">
                                <div className="flex items-start gap-3 text-muted-foreground">
                                    <Bird className="size-5"/>
                                    <div className="grid gap-0.5">
                                        <p>
                                            Neural{" "}
                                            <span className="font-medium text-foreground">
                                Explorer
                              </span>
                                        </p>
                                        <p className="text-xs" data-description>
                                            Performance and speed for efficiency.
                                        </p>
                                    </div>
                                </div>
                            </SelectItem>
                            <SelectItem value="quantum">
                                <div className="flex items-start gap-3 text-muted-foreground">
                                    <Turtle className="size-5"/>
                                    <div className="grid gap-0.5">
                                        <p>
                                            Neural{" "}
                                            <span className="font-medium text-foreground">
                                Quantum
                              </span>
                                        </p>
                                        <p className="text-xs" data-description>
                                            The most powerful model for complex computations.
                                        </p>
                                    </div>
                                </div>
                            </SelectItem>
                        </SelectContent>
                    </Select>
                </div>
                <div className="grid gap-3">
                    <Label htmlFor="temperature">Temperature</Label>
                    <Input id="temperature" type="number" placeholder="0.4"/>
                </div>
                <div className="grid grid-cols-2 gap-4">
                    <div className="grid gap-3">
                        <Label htmlFor="top-p">Top P</Label>
                        <Input id="top-p" type="number" placeholder="0.7"/>
                    </div>
                    <div className="grid gap-3">
                        <Label htmlFor="top-k">Top K</Label>
                        <Input id="top-k" type="number" placeholder="0.0"/>
                    </div>
                </div>
            </fieldset>
        </form>
    </div>;
}



const Chat = () => {
    const markdown = `## Description of \`bigram.py\`
The \`bigram.py\` file implements a simple bigram language model using PyTorch. This model predicts the next character in a sequence based on the previous character.

Here's a breakdown of the code:

**1. Hyperparameters:**

The script starts by defining various hyperparameters like \`batch_size\`, \`block_size\`, \`learning_rate\`, etc. These control the model's training and behavior.

**2. Data Loading and Preprocessing:**

- The script reads a text file (\`input.txt\`) and extracts a list of unique characters.
- It creates mappings between characters and integers for encoding and decoding text.
- The data is split into training and validation sets.
- The \`get_batch\` function generates batches of data for training.

**3. Bigram Language Model:**

- The \`BigramLanguageModel\` class defines the model architecture.
- It uses an embedding table to represent each character as a vector.
- The model predicts the next character based on the current character's embedding.

**4. Training and Evaluation:**

- The script trains the model using the AdamW optimizer.
- It periodically evaluates the model's loss on the training and validation sets.

**5. Text Generation:**

- The script provides a \`generate\` function to generate text from the model.
- It starts with an initial context and iteratively predicts the next character based on the model's predictions.

## Code Snippets:

**1. Encoding and Decoding:**

~~~python
# create a mapping from characters to integers
stoi = { ch:i for i,ch in enumerate(chars) }
itos = { i:ch for i,ch in enumerate(chars) }

# encoder: take a string, output a list of integers
encode = lambda s: [stoi[c] for c in s]

# decoder: take a list of integers, output a string
decode = lambda l: ''.join([itos[i] for i in l])
~~~

**2. Bigram Model Forward Pass:**

~~~python
def forward(self, idx, targets=None):

    # idx and targets are both (B,T) tensor of integers
    logits = self.token_embedding_table(idx) # (B,T,C)

    if targets is None:
        loss = None
    else:
        # ... calculate loss ...

    return logits, loss
~~~

**3. Text Generation:**

~~~python
def generate(self, idx, max_new_tokens):
    # ...
    for _ in range(max_new_tokens):
        # get the predictions
        logits, loss = self(idx)
        # ... sample from the distribution ...
        idx = torch.cat((idx, idx_next), dim=1) # (B, T+1)
    return idx
~~~

These snippets showcase some key functionalities of the \`bigram.py\` script.
`;

    return (
        <div className="flex flex-col  rounded-xl bg-muted/50 p-1 border-2 h-screen lg:h-[calc(100vh-90px)] w-full m-0">
            <div className="w-full h-dvh overflow-auto">
                <Badge variant="outline" className="left-3 top-3 ">
                    Output
                </Badge>
                <div className="flex flex-row m-1 p-1">
                    <div className="content-center">
                        <UserCircle2 className={"size-10"}/>
                    </div>
                    <div className="flex flex-col rounded-2xl bg-background fade-in ml-2 w-full p-3">
                        <span className="p-2">Hi, how are you?</span>
                        <div className="flex flex-row-re items-center gap-2 w-full place-content-end">
                            <p className="text-sm font-semibold">User</p>
                            <p className="text-xs text-muted-foreground">Today at 12:34 PM</p>
                        </div>
                    </div>
                </div>
                <div className="flex flex-row m-1 p-1">
                    <div className="flex flex-col rounded-2xl bg-background fade-in mr-2 w-full p-3">
                        <span className="p-2">Great! How can I help you today?</span>
                        <div className="flex flex-row-re items-center gap-2 w-full place-content-end">
                            <p className="text-sm font-semibold">System</p>
                            <p className="text-xs text-muted-foreground">Today at 12:34 PM</p>
                        </div>
                    </div>
                    <div className="content-center">
                        <BotIcon className="size-10"/>
                    </div>
                </div>
                <div className="flex flex-row m-1 p-1">
                    <div className="content-center">
                        <UserCircle2 className={"size-10"}/>
                    </div>
                    <div className="flex flex-col rounded-2xl bg-background fade-in ml-2 w-full p-3">
                        <span className="p-2">Hi, how are you?</span>
                        <div className="flex flex-row-re items-center gap-2 w-full place-content-end">
                            <p className="text-sm font-semibold">User</p>
                            <p className="text-xs text-muted-foreground">Today at 12:34 PM</p>
                            <Spinner/>
                        </div>
                    </div>
                </div>
                <div className="flex flex-row m-1 p-1">
                    <div className="flex flex-col rounded-2xl bg-background fade-in mr-2 w-full p-3">
                        <span className="p-2">
                             <Markdown
                                 className="markdown"
                                 children={markdown}
                                 remarkPlugins={[remarkParse, remarkGfm, remarkRehype, rehypeStringify]}
                                 rehypePlugins={[rehypeRaw]}
                                 components={{
                                     pre: Pre,
                                     code({node, inline, className = "blog-code", children, ...props}) {
                                         const match = /language-(\w+)/.exec(className || '')
                                         return !inline && match ? (
                                             <SyntaxHighlighter
                                                 style={primTheme}
                                                 showLineNumbers
                                                 language={match[1]}
                                                 PreTag="div"
                                                 {...props}
                                             >
                                                 {String(children).replace(/\n$/, '')}
                                             </SyntaxHighlighter>
                                         ) : (
                                             <code className={className} {...props}>
                                                 {children}
                                             </code>
                                         )
                                     }
                                 }}
                             />
                        </span>
                        <div className="flex flex-row-re items-center gap-2 w-full place-content-end">
                            <p className="text-sm font-semibold">System</p>
                            <p className="text-xs text-muted-foreground">Today at 12:34 PM</p>
                        </div>
                    </div>
                    <div className="content-center">
                        <BotIcon className="size-10"/>
                    </div>
                </div>
            </div>

            <div className="w-full">
                <form
                    className="relative rounded-lg border bg-background focus-within:ring-1 focus-within:ring-ring p-2">
                    <ChatInput/>
                    <div className="flex items-center p-3 pt-0 mt-2">
                        <Tooltip>
                            <TooltipTrigger asChild>
                                <Button variant="ghost" size="icon">
                                    <Paperclip className="size-4"/>
                                    <span className="sr-only">Attach file</span>
                                </Button>
                            </TooltipTrigger>
                            <TooltipContent side="top">Attach File</TooltipContent>
                        </Tooltip>
                        <Tooltip>
                            <TooltipTrigger asChild>
                                <Button variant="ghost" size="icon">
                                    <Mic className="size-4"/>
                                    <span className="sr-only">Use Microphone</span>
                                </Button>
                            </TooltipTrigger>
                            <TooltipContent side="top">Use Microphone</TooltipContent>
                        </Tooltip>
                        <Button type="submit" size="sm" className="ml-auto gap-1.5">
                            Send Message
                            <CornerDownLeft className="size-3.5"/>
                        </Button>
                    </div>
                </form>
            </div>
        </div>
    )
}

export default function HomePage() {
    return (
        <div className="flex flex-col lg:flex-row gap-3">
            <div className="w-full">
            <Chat />
            </div>
            <div>
            <ChatSettings />
            </div>
        </div>
    )
}
const {mutate} = useMutation({
        mutationFn: async (message) => {
            const res = await axiosInstance.post("/sendMessage", message);
            return res.data;
        },
        onMutate: async (message) => {
            await queryClient.cancelQueries(apiEndpoint);
            const previousValue = queryClient.getQueryData(apiEndpoint);
            queryClient.setQueryData(apiEndpoint, (old) => {
                return [...old, message];
            });
            return {previousValue};
        },
        onError: (err, message, context) => {
            queryClient.setQueryData(apiEndpoint, context.previousValue);
        },
        onSettled: () => {
            queryClient.invalidateQueries(apiEndpoint);
        }
    });