import asyncio
import logging
from typing import Annotated

from fastapi import FastAPI, Request, UploadFile, File, Depends, BackgroundTasks
from .db.models import User as UserDBModel
from .db.session_manager import get_db_session
from fastapi import HTTPException
from sqlalchemy import select
import concurrent.futures
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import JSON
import time
from functools import wraps, partial

from geminiplayground.core import GeminiClient

logger = logging.getLogger("rich")

api = FastAPI(root_path="/api")
gemini_client = GeminiClient()

DBSessionDep = Annotated[AsyncSession, Depends(get_db_session)]


async def query_users(db_session: AsyncSession):
    query = select(UserDBModel)
    result = await db_session.execute(query)
    return result.scalars().all()


def query_gemini():
    return gemini_client.generate_response(
        "models/gemini-1.0-pro-latest",
        "Hi!, how are you doing?, can you write a poem for me?",
    )


async def long_running_task(db_session: AsyncSession):
    # users = await query_users(db_session)
    # response = await asyncio.to_thread(query_gemini)
    ##query_gemini()
    loop = asyncio.get_running_loop()
    executor = concurrent.futures.ThreadPoolExecutor(max_workers=5)
    response = await loop.run_in_executor(executor, query_gemini)
    print(response)


@api.get("/users")
async def users_handler(request: Request, db_session: DBSessionDep, background_tasks: BackgroundTasks):
    """
    Hello endpoint
    :return:
    """
    background_tasks.add_task(long_running_task, db_session)
    return {"message": "Your request is being processed"}
